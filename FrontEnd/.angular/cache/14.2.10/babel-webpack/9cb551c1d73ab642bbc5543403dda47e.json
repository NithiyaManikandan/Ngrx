{"ast":null,"code":"import { InjectionToken, Injectable, Inject, ErrorHandler, NgModule } from '@angular/core';\nimport { ActionsSubject, UPDATE, INIT, ReducerObservable, ScannedActionsSubject, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\n\nclass StoreDevtoolsConfig {\n  constructor() {\n    this.maxAge = false;\n  }\n\n}\n\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\n\nfunction noMonitor() {\n  return null;\n}\n\nconst DEFAULT_NAME = 'NgRx Store DevTools';\n\nfunction createConfig(optionsInput) {\n  const DEFAULT_OPTIONS = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: undefined,\n    stateSanitizer: undefined,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    autoPause: false,\n    // Add all features explicitly. This prevent buggy behavior for\n    // options like \"lock\" which might otherwise not show up.\n    features: {\n      pause: true,\n      lock: true,\n      persist: true,\n      export: true,\n      import: 'custom',\n      jump: true,\n      skip: true,\n      reorder: true,\n      dispatch: true,\n      test: true // generate tests for the selected actions\n\n    }\n  };\n  const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n  const logOnly = options.logOnly ? {\n    pause: true,\n    export: true,\n    test: true\n  } : false;\n  const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n  const config = Object.assign({}, DEFAULT_OPTIONS, {\n    features\n  }, options);\n\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n  }\n\n  return config;\n}\n\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\n\nclass PerformAction {\n  constructor(action, timestamp) {\n    this.action = action;\n    this.timestamp = timestamp;\n    this.type = PERFORM_ACTION;\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n  }\n\n}\n\nclass Refresh {\n  constructor() {\n    this.type = REFRESH;\n  }\n\n}\n\nclass Reset {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = RESET;\n  }\n\n}\n\nclass Rollback {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = ROLLBACK;\n  }\n\n}\n\nclass Commit {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = COMMIT;\n  }\n\n}\n\nclass Sweep {\n  constructor() {\n    this.type = SWEEP;\n  }\n\n}\n\nclass ToggleAction {\n  constructor(id) {\n    this.id = id;\n    this.type = TOGGLE_ACTION;\n  }\n\n}\n\nclass SetActionsActive {\n  constructor(start, end, active = true) {\n    this.start = start;\n    this.end = end;\n    this.active = active;\n    this.type = SET_ACTIONS_ACTIVE;\n  }\n\n}\n\nclass JumpToState {\n  constructor(index) {\n    this.index = index;\n    this.type = JUMP_TO_STATE;\n  }\n\n}\n\nclass JumpToAction {\n  constructor(actionId) {\n    this.actionId = actionId;\n    this.type = JUMP_TO_ACTION;\n  }\n\n}\n\nclass ImportState {\n  constructor(nextLiftedState) {\n    this.nextLiftedState = nextLiftedState;\n    this.type = IMPORT_STATE;\n  }\n\n}\n\nclass LockChanges {\n  constructor(status) {\n    this.status = status;\n    this.type = LOCK_CHANGES;\n  }\n\n}\n\nclass PauseRecording {\n  constructor(status) {\n    this.status = status;\n    this.type = PAUSE_RECORDING;\n  }\n\n}\n\nclass DevtoolsDispatcher extends ActionsSubject {}\n\nDevtoolsDispatcher.ɵfac = /*@__PURE__*/function () {\n  let ɵDevtoolsDispatcher_BaseFactory;\n  return function DevtoolsDispatcher_Factory(t) {\n    return (ɵDevtoolsDispatcher_BaseFactory || (ɵDevtoolsDispatcher_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DevtoolsDispatcher)))(t || DevtoolsDispatcher);\n  };\n}();\n\nDevtoolsDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: DevtoolsDispatcher,\n  factory: DevtoolsDispatcher.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsDispatcher, [{\n    type: Injectable\n  }], null, null);\n})();\n\nfunction difference(first, second) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\n\n\nfunction unliftState(liftedState) {\n  const {\n    computedStates,\n    currentStateIndex\n  } = liftedState; // At start up NgRx dispatches init actions,\n  // When these init actions are being filtered out by the predicate or safe/block list options\n  // we don't have a complete computed states yet.\n  // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n\n  if (currentStateIndex >= computedStates.length) {\n    const {\n      state\n    } = computedStates[computedStates.length - 1];\n    return state;\n  }\n\n  const {\n    state\n  } = computedStates[currentStateIndex];\n  return state;\n}\n\nfunction unliftAction(liftedState) {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\n\n\nfunction liftAction(action) {\n  return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\n\n\nfunction sanitizeActions(actionSanitizer, actions) {\n  return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n    const idx = Number(actionIdx);\n    sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n    return sanitizedActions;\n  }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\n\n\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n  return Object.assign(Object.assign({}, action), {\n    action: actionSanitizer(action.action, actionIdx)\n  });\n}\n/**\n * Sanitizes given states with given function.\n */\n\n\nfunction sanitizeStates(stateSanitizer, states) {\n  return states.map((computedState, idx) => ({\n    state: sanitizeState(stateSanitizer, computedState.state, idx),\n    error: computedState.error\n  }));\n}\n/**\n * Sanitizes given state with given function.\n */\n\n\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n  return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\n\n\nfunction shouldFilterActions(config) {\n  return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\n\n\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n  const filteredStagedActionIds = [];\n  const filteredActionsById = {};\n  const filteredComputedStates = [];\n  liftedState.stagedActionIds.forEach((id, idx) => {\n    const liftedAction = liftedState.actionsById[id];\n    if (!liftedAction) return;\n\n    if (idx && isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n      return;\n    }\n\n    filteredActionsById[id] = liftedAction;\n    filteredStagedActionIds.push(id);\n    filteredComputedStates.push(liftedState.computedStates[idx]);\n  });\n  return Object.assign(Object.assign({}, liftedState), {\n    stagedActionIds: filteredStagedActionIds,\n    actionsById: filteredActionsById,\n    computedStates: filteredComputedStates\n  });\n}\n/**\n * Return true is the action should be ignored\n */\n\n\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n  const predicateMatch = predicate && !predicate(state, action.action);\n  const safelistMatch = safelist && !action.action.type.match(safelist.map(s => escapeRegExp(s)).join('|'));\n  const blocklistMatch = blockedlist && action.action.type.match(blockedlist.map(s => escapeRegExp(s)).join('|'));\n  return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\n\n\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nconst ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION'\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\n\nclass DevtoolsExtension {\n  constructor(devtoolsExtension, config, dispatcher) {\n    this.config = config;\n    this.dispatcher = dispatcher;\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n\n  notify(action, state) {\n    if (!this.devtoolsExtension) {\n      return;\n    } // Check to see if the action requires a full update of the liftedState.\n    // If it is a simple action generated by the user's app and the recording\n    // is not locked/paused, only send the action and the current state (fast).\n    //\n    // A full liftedState update (slow: serializes the entire liftedState) is\n    // only required when:\n    //   a) redux-devtools-extension fires the @@Init action (ignored by\n    //      @ngrx/store-devtools)\n    //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n    //      or @ngrx/store/update-reducers)\n    //   c) the state has been recomputed due to time-traveling\n    //   d) any action that is not a PerformAction to err on the side of\n    //      caution.\n\n\n    if (action.type === PERFORM_ACTION) {\n      if (state.isLocked || state.isPaused) {\n        return;\n      }\n\n      const currentState = unliftState(state);\n\n      if (shouldFilterActions(this.config) && isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n        return;\n      }\n\n      const sanitizedState = this.config.stateSanitizer ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex) : currentState;\n      const sanitizedAction = this.config.actionSanitizer ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId) : action;\n      this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n    } else {\n      // Requires full state update\n      const sanitizedLiftedState = Object.assign(Object.assign({}, state), {\n        stagedActionIds: state.stagedActionIds,\n        actionsById: this.config.actionSanitizer ? sanitizeActions(this.config.actionSanitizer, state.actionsById) : state.actionsById,\n        computedStates: this.config.stateSanitizer ? sanitizeStates(this.config.stateSanitizer, state.computedStates) : state.computedStates\n      });\n      this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n    }\n  }\n\n  createChangesObservable() {\n    if (!this.devtoolsExtension) {\n      return EMPTY;\n    }\n\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n      this.extensionConnection = connection;\n      connection.init();\n      connection.subscribe(change => subscriber.next(change));\n      return connection.unsubscribe;\n    });\n  }\n\n  createActionStreams() {\n    // Listens to all changes\n    const changes$ = this.createChangesObservable().pipe(share()); // Listen for the start action\n\n    const start$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.START)); // Listen for the stop action\n\n    const stop$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.STOP)); // Listen for lifted actions\n\n    const liftedActions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.DISPATCH), map(change => this.unwrapAction(change.payload)), concatMap(action => {\n      if (action.type === IMPORT_STATE) {\n        // State imports may happen in two situations:\n        // 1. Explicitly by user\n        // 2. User activated the \"persist state accross reloads\" option\n        //    and now the state is imported during reload.\n        // Because of option 2, we need to give possible\n        // lazy loaded reducers time to instantiate.\n        // As soon as there is no UPDATE action within 1 second,\n        // it is assumed that all reducers are loaded.\n        return this.dispatcher.pipe(filter(action => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n      } else {\n        return of(action);\n      }\n    })); // Listen for unlifted actions\n\n    const actions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.ACTION), map(change => this.unwrapAction(change.payload)));\n    const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n    const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n    this.start$ = start$.pipe(takeUntil(stop$)); // Only take the action sources between the start/stop events\n\n    this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n    this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n  }\n\n  unwrapAction(action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n\n  getExtensionConfig(config) {\n    var _a;\n\n    const extensionOptions = {\n      name: config.name,\n      features: config.features,\n      serialize: config.serialize,\n      autoPause: (_a = config.autoPause) !== null && _a !== void 0 ? _a : false // The action/state sanitizers are not added to the config\n      // because sanitation is done in this class already.\n      // It is done before sending it to the devtools extension for consistency:\n      // - If we call extensionConnection.send(...),\n      //   the extension would call the sanitizers.\n      // - If we call devtoolsExtension.send(...) (aka full state update),\n      //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n\n    };\n\n    if (config.maxAge !== false\n    /* support === 0 */\n    ) {\n      extensionOptions.maxAge = config.maxAge;\n    }\n\n    return extensionOptions;\n  }\n\n  sendToReduxDevtools(send) {\n    try {\n      send();\n    } catch (err) {\n      console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n    }\n  }\n\n}\n\nDevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) {\n  return new (t || DevtoolsExtension)(ɵngcc0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG), ɵngcc0.ɵɵinject(DevtoolsDispatcher));\n};\n\nDevtoolsExtension.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: DevtoolsExtension,\n  factory: DevtoolsExtension.ɵfac\n});\n/** @nocollapse */\n\nDevtoolsExtension.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [REDUX_DEVTOOLS_EXTENSION]\n  }]\n}, {\n  type: StoreDevtoolsConfig,\n  decorators: [{\n    type: Inject,\n    args: [STORE_DEVTOOLS_CONFIG]\n  }]\n}, {\n  type: DevtoolsDispatcher\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsExtension, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REDUX_DEVTOOLS_EXTENSION]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }, {\n      type: DevtoolsDispatcher\n    }];\n  }, null);\n})();\n\nconst INIT_ACTION = {\n  type: INIT\n};\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = {\n  type: RECOMPUTE\n};\n/**\n * Computes the next entry in the log by applying an action.\n */\n\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain'\n    };\n  }\n\n  let nextState = state;\n  let nextError;\n\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError\n  };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\n\n\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {\n    return computedStates;\n  }\n\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex); // If the recording is paused, recompute all states up until the pause state,\n  // else recompute all states.\n\n  const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n\n  for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry = shouldSkip ? previousEntry : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n    nextComputedStates.push(entry);\n  } // If the recording is paused, the last state will not be recomputed,\n  // because it's essentially not part of the state history.\n\n\n  if (isPaused) {\n    nextComputedStates.push(computedStates[computedStates.length - 1]);\n  }\n\n  return nextComputedStates;\n}\n\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: {\n      0: liftAction(INIT_ACTION)\n    },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n    isLocked: false,\n    isPaused: false\n  };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\n\n\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return reducer => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    } = liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n\n    function commitExcessActions(n) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(id => idsToDelete.indexOf(id) === -1);\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    function commitChanges() {\n      // Consider the last committed state the new starting point.\n      // Squash any staged actions into a single committed state.\n      actionsById = {\n        0: liftAction(INIT_ACTION)\n      };\n      nextActionId = 1;\n      stagedActionIds = [0];\n      skippedActionIds = [];\n      committedState = computedStates[currentStateIndex].state;\n      currentStateIndex = 0;\n      computedStates = [];\n    } // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n\n\n    let minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case LOCK_CHANGES:\n        {\n          isLocked = liftedAction.status;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n\n      case PAUSE_RECORDING:\n        {\n          isPaused = liftedAction.status;\n\n          if (isPaused) {\n            // Add a pause action to signal the devtools-user the recording is paused.\n            // The corresponding state will be overwritten on each update to always contain\n            // the latest state (see Actions.PERFORM_ACTION).\n            stagedActionIds = [...stagedActionIds, nextActionId];\n            actionsById[nextActionId] = new PerformAction({\n              type: '@ngrx/devtools/pause'\n            }, +Date.now());\n            nextActionId++;\n            minInvalidatedStateIndex = stagedActionIds.length - 1;\n            computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n\n            if (currentStateIndex === stagedActionIds.length - 2) {\n              currentStateIndex++;\n            }\n\n            minInvalidatedStateIndex = Infinity;\n          } else {\n            commitChanges();\n          }\n\n          break;\n        }\n\n      case RESET:\n        {\n          // Get back to the state the store was created with.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = initialCommittedState;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n\n      case COMMIT:\n        {\n          commitChanges();\n          break;\n        }\n\n      case ROLLBACK:\n        {\n          // Forget about any staged actions.\n          // Start again from the last committed state.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n\n      case TOGGLE_ACTION:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            id: actionId\n          } = liftedAction;\n          const index = skippedActionIds.indexOf(actionId);\n\n          if (index === -1) {\n            skippedActionIds = [actionId, ...skippedActionIds];\n          } else {\n            skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n          } // Optimization: we know history before this action hasn't changed\n\n\n          minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n          break;\n        }\n\n      case SET_ACTIONS_ACTIVE:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            start,\n            end,\n            active\n          } = liftedAction;\n          const actionIds = [];\n\n          for (let i = start; i < end; i++) actionIds.push(i);\n\n          if (active) {\n            skippedActionIds = difference(skippedActionIds, actionIds);\n          } else {\n            skippedActionIds = [...skippedActionIds, ...actionIds];\n          } // Optimization: we know history before this action hasn't changed\n\n\n          minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n          break;\n        }\n\n      case JUMP_TO_STATE:\n        {\n          // Without recomputing anything, move the pointer that tell us\n          // which state is considered the current one. Useful for sliders.\n          currentStateIndex = liftedAction.index; // Optimization: we know the history has not changed.\n\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n\n      case JUMP_TO_ACTION:\n        {\n          // Jumps to a corresponding state to a specific action.\n          // Useful when filtering actions.\n          const index = stagedActionIds.indexOf(liftedAction.actionId);\n          if (index !== -1) currentStateIndex = index;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n\n      case SWEEP:\n        {\n          // Forget any actions that are currently being skipped.\n          stagedActionIds = difference(stagedActionIds, skippedActionIds);\n          skippedActionIds = [];\n          currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n          break;\n        }\n\n      case PERFORM_ACTION:\n        {\n          // Ignore action and return state as is if recording is locked\n          if (isLocked) {\n            return liftedState || initialLiftedState;\n          }\n\n          if (isPaused || liftedState && isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist)) {\n            // If recording is paused or if the action should be ignored, overwrite the last state\n            // (corresponds to the pause action) and keep everything else as is.\n            // This way, the app gets the new current state while the devtools\n            // do not record another action.\n            const lastState = computedStates[computedStates.length - 1];\n            computedStates = [...computedStates.slice(0, -1), computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler)];\n            minInvalidatedStateIndex = Infinity;\n            break;\n          } // Auto-commit as new actions come in.\n\n\n          if (options.maxAge && stagedActionIds.length === options.maxAge) {\n            commitExcessActions(1);\n          }\n\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n\n          const actionId = nextActionId++; // Mutation! This is the hottest path, and we optimize on purpose.\n          // It is safe because we set a new key in a cache dictionary.\n\n          actionsById[actionId] = liftedAction;\n          stagedActionIds = [...stagedActionIds, actionId]; // Optimization: we know that only the new action needs computing.\n\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n          break;\n        }\n\n      case IMPORT_STATE:\n        {\n          // Completely replace everything.\n          ({\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused\n          } = liftedAction.nextLiftedState);\n          break;\n        }\n\n      case INIT:\n        {\n          // Always recompute states on hot reload and init.\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            commitExcessActions(stagedActionIds.length - options.maxAge); // Avoid double computation.\n\n            minInvalidatedStateIndex = Infinity;\n          }\n\n          break;\n        }\n\n      case UPDATE:\n        {\n          const stateHasErrors = computedStates.filter(state => state.error).length > 0;\n\n          if (stateHasErrors) {\n            // Recompute all states\n            minInvalidatedStateIndex = 0;\n\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              // States must be recomputed before committing excess.\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n              commitExcessActions(stagedActionIds.length - options.maxAge); // Avoid double computation.\n\n              minInvalidatedStateIndex = Infinity;\n            }\n          } else {\n            // If not paused/locked, add a new action to signal devtools-user\n            // that there was a reducer update.\n            if (!isPaused && !isLocked) {\n              if (currentStateIndex === stagedActionIds.length - 1) {\n                currentStateIndex++;\n              } // Add a new action to only recompute state\n\n\n              const actionId = nextActionId++;\n              actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n              stagedActionIds = [...stagedActionIds, actionId];\n              minInvalidatedStateIndex = stagedActionIds.length - 1;\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            } // Recompute state history with latest reducer and update action\n\n\n            computedStates = computedStates.map(cmp => Object.assign(Object.assign({}, cmp), {\n              state: reducer(cmp.state, RECOMPUTE_ACTION)\n            }));\n            currentStateIndex = stagedActionIds.length - 1;\n\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              commitExcessActions(stagedActionIds.length - options.maxAge);\n            } // Avoid double computation.\n\n\n            minInvalidatedStateIndex = Infinity;\n          }\n\n          break;\n        }\n\n      default:\n        {\n          // If the action is not recognized, it's a monitor action.\n          // Optimization: a monitor action can't change history.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n    }\n\n    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n    monitorState = monitorReducer(monitorState, liftedAction);\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    };\n  };\n}\n\nclass StoreDevtools {\n  constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n    const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n    const liftedReducer$ = reducers$.pipe(map(liftReducer));\n    const liftedStateSubject = new ReplaySubject(1);\n    const liftedStateSubscription = liftedAction$.pipe(withLatestFrom(liftedReducer$), scan(({\n      state: liftedState\n    }, [action, reducer]) => {\n      let reducedLiftedState = reducer(liftedState, action); // On full state update\n      // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n\n      if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n        reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n      } // Extension should be sent the sanitized lifted state\n\n\n      extension.notify(action, reducedLiftedState);\n      return {\n        state: reducedLiftedState,\n        action\n      };\n    }, {\n      state: liftedInitialState,\n      action: null\n    })).subscribe(({\n      state,\n      action\n    }) => {\n      liftedStateSubject.next(state);\n\n      if (action.type === PERFORM_ACTION) {\n        const unliftedAction = action.action;\n        scannedActions.next(unliftedAction);\n      }\n    });\n    const extensionStartSubscription = extension.start$.subscribe(() => {\n      this.refresh();\n    });\n    const liftedState$ = liftedStateSubject.asObservable();\n    const state$ = liftedState$.pipe(map(unliftState));\n    this.extensionStartSubscription = extensionStartSubscription;\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n\n  dispatch(action) {\n    this.dispatcher.next(action);\n  }\n\n  next(action) {\n    this.dispatcher.next(action);\n  }\n\n  error(error) {}\n\n  complete() {}\n\n  performAction(action) {\n    this.dispatch(new PerformAction(action, +Date.now()));\n  }\n\n  refresh() {\n    this.dispatch(new Refresh());\n  }\n\n  reset() {\n    this.dispatch(new Reset(+Date.now()));\n  }\n\n  rollback() {\n    this.dispatch(new Rollback(+Date.now()));\n  }\n\n  commit() {\n    this.dispatch(new Commit(+Date.now()));\n  }\n\n  sweep() {\n    this.dispatch(new Sweep());\n  }\n\n  toggleAction(id) {\n    this.dispatch(new ToggleAction(id));\n  }\n\n  jumpToAction(actionId) {\n    this.dispatch(new JumpToAction(actionId));\n  }\n\n  jumpToState(index) {\n    this.dispatch(new JumpToState(index));\n  }\n\n  importState(nextLiftedState) {\n    this.dispatch(new ImportState(nextLiftedState));\n  }\n\n  lockChanges(status) {\n    this.dispatch(new LockChanges(status));\n  }\n\n  pauseRecording(status) {\n    this.dispatch(new PauseRecording(status));\n  }\n\n}\n\nStoreDevtools.ɵfac = function StoreDevtools_Factory(t) {\n  return new (t || StoreDevtools)(ɵngcc0.ɵɵinject(DevtoolsDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerObservable), ɵngcc0.ɵɵinject(DevtoolsExtension), ɵngcc0.ɵɵinject(ɵngcc1.ScannedActionsSubject), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG));\n};\n\nStoreDevtools.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: StoreDevtools,\n  factory: StoreDevtools.ɵfac\n});\n/** @nocollapse */\n\nStoreDevtools.ctorParameters = () => [{\n  type: DevtoolsDispatcher\n}, {\n  type: ActionsSubject\n}, {\n  type: ReducerObservable\n}, {\n  type: DevtoolsExtension\n}, {\n  type: ScannedActionsSubject\n}, {\n  type: ErrorHandler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [INITIAL_STATE]\n  }]\n}, {\n  type: StoreDevtoolsConfig,\n  decorators: [{\n    type: Inject,\n    args: [STORE_DEVTOOLS_CONFIG]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtools, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DevtoolsDispatcher\n    }, {\n      type: ɵngcc1.ActionsSubject\n    }, {\n      type: ɵngcc1.ReducerObservable\n    }, {\n      type: DevtoolsExtension\n    }, {\n      type: ɵngcc1.ScannedActionsSubject\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\n\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\n\nfunction createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n\n  if (typeof window === 'object' && typeof window[extensionKey] !== 'undefined') {\n    return window[extensionKey];\n  } else {\n    return null;\n  }\n}\n\nfunction createStateObservable(devtools) {\n  return devtools.state;\n}\n\nclass StoreDevtoolsModule {\n  static instrument(options = {}) {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [DevtoolsExtension, DevtoolsDispatcher, StoreDevtools, {\n        provide: INITIAL_OPTIONS,\n        useValue: options\n      }, {\n        provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n        deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n        useFactory: createIsExtensionOrMonitorPresent\n      }, {\n        provide: REDUX_DEVTOOLS_EXTENSION,\n        useFactory: createReduxDevtoolsExtension\n      }, {\n        provide: STORE_DEVTOOLS_CONFIG,\n        deps: [INITIAL_OPTIONS],\n        useFactory: createConfig\n      }, {\n        provide: StateObservable,\n        deps: [StoreDevtools],\n        useFactory: createStateObservable\n      }, {\n        provide: ReducerManagerDispatcher,\n        useExisting: DevtoolsDispatcher\n      }]\n    };\n  }\n\n}\n\nStoreDevtoolsModule.ɵfac = function StoreDevtoolsModule_Factory(t) {\n  return new (t || StoreDevtoolsModule)();\n};\n\nStoreDevtoolsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: StoreDevtoolsModule\n});\nStoreDevtoolsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtoolsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_OPTIONS, RECOMPUTE, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, IS_EXTENSION_OR_MONITOR_PRESENT as ɵa, createIsExtensionOrMonitorPresent as ɵb, createReduxDevtoolsExtension as ɵc, createStateObservable as ɵd, STORE_DEVTOOLS_CONFIG as ɵe, noMonitor as ɵf, createConfig as ɵg, REDUX_DEVTOOLS_EXTENSION as ɵh, DevtoolsExtension as ɵi, DevtoolsDispatcher as ɵj };","map":{"version":3,"names":["InjectionToken","Injectable","Inject","ErrorHandler","NgModule","ActionsSubject","UPDATE","INIT","ReducerObservable","ScannedActionsSubject","INITIAL_STATE","StateObservable","ReducerManagerDispatcher","EMPTY","Observable","of","merge","queueScheduler","ReplaySubject","share","filter","map","concatMap","timeout","debounceTime","catchError","take","takeUntil","switchMap","skip","observeOn","withLatestFrom","scan","ɵngcc0","ɵngcc1","StoreDevtoolsConfig","constructor","maxAge","STORE_DEVTOOLS_CONFIG","INITIAL_OPTIONS","noMonitor","DEFAULT_NAME","createConfig","optionsInput","DEFAULT_OPTIONS","monitor","actionSanitizer","undefined","stateSanitizer","name","serialize","logOnly","autoPause","features","pause","lock","persist","export","import","jump","reorder","dispatch","test","options","config","Object","assign","Error","PERFORM_ACTION","REFRESH","RESET","ROLLBACK","COMMIT","SWEEP","TOGGLE_ACTION","SET_ACTIONS_ACTIVE","JUMP_TO_STATE","JUMP_TO_ACTION","IMPORT_STATE","LOCK_CHANGES","PAUSE_RECORDING","PerformAction","action","timestamp","type","Refresh","Reset","Rollback","Commit","Sweep","ToggleAction","id","SetActionsActive","start","end","active","JumpToState","index","JumpToAction","actionId","ImportState","nextLiftedState","LockChanges","status","PauseRecording","DevtoolsDispatcher","ɵfac","ɵDevtoolsDispatcher_BaseFactory","DevtoolsDispatcher_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","difference","first","second","item","indexOf","unliftState","liftedState","computedStates","currentStateIndex","length","state","unliftAction","actionsById","nextActionId","liftAction","Date","now","sanitizeActions","actions","keys","reduce","sanitizedActions","actionIdx","idx","Number","sanitizeAction","sanitizeStates","states","computedState","sanitizeState","error","stateIdx","shouldFilterActions","predicate","actionsSafelist","actionsBlocklist","filterLiftedState","safelist","blocklist","filteredStagedActionIds","filteredActionsById","filteredComputedStates","stagedActionIds","forEach","liftedAction","isActionFiltered","push","blockedlist","predicateMatch","safelistMatch","match","s","escapeRegExp","join","blocklistMatch","replace","ExtensionActionTypes","START","DISPATCH","STOP","ACTION","REDUX_DEVTOOLS_EXTENSION","DevtoolsExtension","devtoolsExtension","dispatcher","createActionStreams","notify","isLocked","isPaused","currentState","sanitizedState","sanitizedAction","sendToReduxDevtools","extensionConnection","send","sanitizedLiftedState","getExtensionConfig","createChangesObservable","subscriber","connection","connect","init","subscribe","change","next","unsubscribe","changes$","pipe","start$","stop$","liftedActions$","unwrapAction","payload","actions$","actionsUntilStop$","liftedUntilStop$","eval","_a","extensionOptions","err","console","warn","DevtoolsExtension_Factory","ɵɵinject","ctorParameters","decorators","args","INIT_ACTION","RECOMPUTE","RECOMPUTE_ACTION","computeNextEntry","reducer","errorHandler","nextState","nextError","toString","handleError","recomputeStates","minInvalidatedStateIndex","committedState","skippedActionIds","nextComputedStates","slice","lastIncludedActionId","i","previousEntry","previousState","previousError","shouldSkip","entry","liftInitialState","initialCommittedState","monitorReducer","monitorState","liftReducerWith","initialLiftedState","create","commitExcessActions","n","excess","idsToDelete","commitChanges","Infinity","concat","actionIds","Math","min","lastState","stateHasErrors","cmp","StoreDevtools","reducers$","extension","scannedActions","initialState","liftedInitialState","liftReducer","liftedAction$","asObservable","liftedReducer$","liftedStateSubject","liftedStateSubscription","reducedLiftedState","unliftedAction","extensionStartSubscription","refresh","liftedState$","state$","stateSubscription","complete","performAction","reset","rollback","commit","sweep","toggleAction","jumpToAction","jumpToState","importState","lockChanges","pauseRecording","StoreDevtools_Factory","IS_EXTENSION_OR_MONITOR_PRESENT","createIsExtensionOrMonitorPresent","Boolean","createReduxDevtoolsExtension","extensionKey","window","createStateObservable","devtools","StoreDevtoolsModule","instrument","ngModule","providers","provide","useValue","deps","useFactory","useExisting","StoreDevtoolsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ɵa","ɵb","ɵc","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj"],"sources":["/home/asplap1973/ngrx/FrontEnd/node_modules/@ngrx/store-devtools/__ivy_ngcc__/fesm2015/ngrx-store-devtools.js"],"sourcesContent":["import { InjectionToken, Injectable, Inject, ErrorHandler, NgModule } from '@angular/core';\nimport { ActionsSubject, UPDATE, INIT, ReducerObservable, ScannedActionsSubject, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nclass StoreDevtoolsConfig {\n    constructor() {\n        this.maxAge = false;\n    }\n}\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\nfunction noMonitor() {\n    return null;\n}\nconst DEFAULT_NAME = 'NgRx Store DevTools';\nfunction createConfig(optionsInput) {\n    const DEFAULT_OPTIONS = {\n        maxAge: false,\n        monitor: noMonitor,\n        actionSanitizer: undefined,\n        stateSanitizer: undefined,\n        name: DEFAULT_NAME,\n        serialize: false,\n        logOnly: false,\n        autoPause: false,\n        // Add all features explicitly. This prevent buggy behavior for\n        // options like \"lock\" which might otherwise not show up.\n        features: {\n            pause: true,\n            lock: true,\n            persist: true,\n            export: true,\n            import: 'custom',\n            jump: true,\n            skip: true,\n            reorder: true,\n            dispatch: true,\n            test: true, // generate tests for the selected actions\n        },\n    };\n    const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n    const logOnly = options.logOnly\n        ? { pause: true, export: true, test: true }\n        : false;\n    const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n    const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n    if (config.maxAge && config.maxAge < 2) {\n        throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n    }\n    return config;\n}\n\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n    constructor(action, timestamp) {\n        this.action = action;\n        this.timestamp = timestamp;\n        this.type = PERFORM_ACTION;\n        if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' +\n                'Have you misspelled a constant?');\n        }\n    }\n}\nclass Refresh {\n    constructor() {\n        this.type = REFRESH;\n    }\n}\nclass Reset {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = RESET;\n    }\n}\nclass Rollback {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = ROLLBACK;\n    }\n}\nclass Commit {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = COMMIT;\n    }\n}\nclass Sweep {\n    constructor() {\n        this.type = SWEEP;\n    }\n}\nclass ToggleAction {\n    constructor(id) {\n        this.id = id;\n        this.type = TOGGLE_ACTION;\n    }\n}\nclass SetActionsActive {\n    constructor(start, end, active = true) {\n        this.start = start;\n        this.end = end;\n        this.active = active;\n        this.type = SET_ACTIONS_ACTIVE;\n    }\n}\nclass JumpToState {\n    constructor(index) {\n        this.index = index;\n        this.type = JUMP_TO_STATE;\n    }\n}\nclass JumpToAction {\n    constructor(actionId) {\n        this.actionId = actionId;\n        this.type = JUMP_TO_ACTION;\n    }\n}\nclass ImportState {\n    constructor(nextLiftedState) {\n        this.nextLiftedState = nextLiftedState;\n        this.type = IMPORT_STATE;\n    }\n}\nclass LockChanges {\n    constructor(status) {\n        this.status = status;\n        this.type = LOCK_CHANGES;\n    }\n}\nclass PauseRecording {\n    constructor(status) {\n        this.status = status;\n        this.type = PAUSE_RECORDING;\n    }\n}\n\nclass DevtoolsDispatcher extends ActionsSubject {\n}\nDevtoolsDispatcher.ɵfac = /*@__PURE__*/ function () { let ɵDevtoolsDispatcher_BaseFactory; return function DevtoolsDispatcher_Factory(t) { return (ɵDevtoolsDispatcher_BaseFactory || (ɵDevtoolsDispatcher_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DevtoolsDispatcher)))(t || DevtoolsDispatcher); }; }();\nDevtoolsDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DevtoolsDispatcher, factory: DevtoolsDispatcher.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsDispatcher, [{\n        type: Injectable\n    }], null, null); })();\n\nfunction difference(first, second) {\n    return first.filter((item) => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n    const { computedStates, currentStateIndex } = liftedState;\n    // At start up NgRx dispatches init actions,\n    // When these init actions are being filtered out by the predicate or safe/block list options\n    // we don't have a complete computed states yet.\n    // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n    if (currentStateIndex >= computedStates.length) {\n        const { state } = computedStates[computedStates.length - 1];\n        return state;\n    }\n    const { state } = computedStates[currentStateIndex];\n    return state;\n}\nfunction unliftAction(liftedState) {\n    return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n    return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n    return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n        const idx = Number(actionIdx);\n        sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n        return sanitizedActions;\n    }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n    return Object.assign(Object.assign({}, action), { action: actionSanitizer(action.action, actionIdx) });\n}\n/**\n * Sanitizes given states with given function.\n */\nfunction sanitizeStates(stateSanitizer, states) {\n    return states.map((computedState, idx) => ({\n        state: sanitizeState(stateSanitizer, computedState.state, idx),\n        error: computedState.error,\n    }));\n}\n/**\n * Sanitizes given state with given function.\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n    return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\nfunction shouldFilterActions(config) {\n    return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n    const filteredStagedActionIds = [];\n    const filteredActionsById = {};\n    const filteredComputedStates = [];\n    liftedState.stagedActionIds.forEach((id, idx) => {\n        const liftedAction = liftedState.actionsById[id];\n        if (!liftedAction)\n            return;\n        if (idx &&\n            isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n            return;\n        }\n        filteredActionsById[id] = liftedAction;\n        filteredStagedActionIds.push(id);\n        filteredComputedStates.push(liftedState.computedStates[idx]);\n    });\n    return Object.assign(Object.assign({}, liftedState), { stagedActionIds: filteredStagedActionIds, actionsById: filteredActionsById, computedStates: filteredComputedStates });\n}\n/**\n * Return true is the action should be ignored\n */\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n    const predicateMatch = predicate && !predicate(state, action.action);\n    const safelistMatch = safelist &&\n        !action.action.type.match(safelist.map((s) => escapeRegExp(s)).join('|'));\n    const blocklistMatch = blockedlist &&\n        action.action.type.match(blockedlist.map((s) => escapeRegExp(s)).join('|'));\n    return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nconst ExtensionActionTypes = {\n    START: 'START',\n    DISPATCH: 'DISPATCH',\n    STOP: 'STOP',\n    ACTION: 'ACTION',\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\nclass DevtoolsExtension {\n    constructor(devtoolsExtension, config, dispatcher) {\n        this.config = config;\n        this.dispatcher = dispatcher;\n        this.devtoolsExtension = devtoolsExtension;\n        this.createActionStreams();\n    }\n    notify(action, state) {\n        if (!this.devtoolsExtension) {\n            return;\n        }\n        // Check to see if the action requires a full update of the liftedState.\n        // If it is a simple action generated by the user's app and the recording\n        // is not locked/paused, only send the action and the current state (fast).\n        //\n        // A full liftedState update (slow: serializes the entire liftedState) is\n        // only required when:\n        //   a) redux-devtools-extension fires the @@Init action (ignored by\n        //      @ngrx/store-devtools)\n        //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n        //      or @ngrx/store/update-reducers)\n        //   c) the state has been recomputed due to time-traveling\n        //   d) any action that is not a PerformAction to err on the side of\n        //      caution.\n        if (action.type === PERFORM_ACTION) {\n            if (state.isLocked || state.isPaused) {\n                return;\n            }\n            const currentState = unliftState(state);\n            if (shouldFilterActions(this.config) &&\n                isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n                return;\n            }\n            const sanitizedState = this.config.stateSanitizer\n                ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex)\n                : currentState;\n            const sanitizedAction = this.config.actionSanitizer\n                ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId)\n                : action;\n            this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n        }\n        else {\n            // Requires full state update\n            const sanitizedLiftedState = Object.assign(Object.assign({}, state), { stagedActionIds: state.stagedActionIds, actionsById: this.config.actionSanitizer\n                    ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n                    : state.actionsById, computedStates: this.config.stateSanitizer\n                    ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n                    : state.computedStates });\n            this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n        }\n    }\n    createChangesObservable() {\n        if (!this.devtoolsExtension) {\n            return EMPTY;\n        }\n        return new Observable((subscriber) => {\n            const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n            this.extensionConnection = connection;\n            connection.init();\n            connection.subscribe((change) => subscriber.next(change));\n            return connection.unsubscribe;\n        });\n    }\n    createActionStreams() {\n        // Listens to all changes\n        const changes$ = this.createChangesObservable().pipe(share());\n        // Listen for the start action\n        const start$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.START));\n        // Listen for the stop action\n        const stop$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.STOP));\n        // Listen for lifted actions\n        const liftedActions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.DISPATCH), map((change) => this.unwrapAction(change.payload)), concatMap((action) => {\n            if (action.type === IMPORT_STATE) {\n                // State imports may happen in two situations:\n                // 1. Explicitly by user\n                // 2. User activated the \"persist state accross reloads\" option\n                //    and now the state is imported during reload.\n                // Because of option 2, we need to give possible\n                // lazy loaded reducers time to instantiate.\n                // As soon as there is no UPDATE action within 1 second,\n                // it is assumed that all reducers are loaded.\n                return this.dispatcher.pipe(filter((action) => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n            }\n            else {\n                return of(action);\n            }\n        }));\n        // Listen for unlifted actions\n        const actions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.ACTION), map((change) => this.unwrapAction(change.payload)));\n        const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n        const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n        this.start$ = start$.pipe(takeUntil(stop$));\n        // Only take the action sources between the start/stop events\n        this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n        this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n    }\n    unwrapAction(action) {\n        return typeof action === 'string' ? eval(`(${action})`) : action;\n    }\n    getExtensionConfig(config) {\n        var _a;\n        const extensionOptions = {\n            name: config.name,\n            features: config.features,\n            serialize: config.serialize,\n            autoPause: (_a = config.autoPause) !== null && _a !== void 0 ? _a : false,\n            // The action/state sanitizers are not added to the config\n            // because sanitation is done in this class already.\n            // It is done before sending it to the devtools extension for consistency:\n            // - If we call extensionConnection.send(...),\n            //   the extension would call the sanitizers.\n            // - If we call devtoolsExtension.send(...) (aka full state update),\n            //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n        };\n        if (config.maxAge !== false /* support === 0 */) {\n            extensionOptions.maxAge = config.maxAge;\n        }\n        return extensionOptions;\n    }\n    sendToReduxDevtools(send) {\n        try {\n            send();\n        }\n        catch (err) {\n            console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n        }\n    }\n}\nDevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) { return new (t || DevtoolsExtension)(ɵngcc0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG), ɵngcc0.ɵɵinject(DevtoolsDispatcher)); };\nDevtoolsExtension.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DevtoolsExtension, factory: DevtoolsExtension.ɵfac });\n/** @nocollapse */\nDevtoolsExtension.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [REDUX_DEVTOOLS_EXTENSION,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] },\n    { type: DevtoolsDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsExtension, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [REDUX_DEVTOOLS_EXTENSION]\n            }] }, { type: StoreDevtoolsConfig, decorators: [{\n                type: Inject,\n                args: [STORE_DEVTOOLS_CONFIG]\n            }] }, { type: DevtoolsDispatcher }]; }, null); })();\n\nconst INIT_ACTION = { type: INIT };\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = { type: RECOMPUTE };\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n    if (error) {\n        return {\n            state,\n            error: 'Interrupted by an error up the chain',\n        };\n    }\n    let nextState = state;\n    let nextError;\n    try {\n        nextState = reducer(state, action);\n    }\n    catch (err) {\n        nextError = err.toString();\n        errorHandler.handleError(err);\n    }\n    return {\n        state: nextState,\n        error: nextError,\n    };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n    // Optimization: exit early and return the same reference\n    // if we know nothing could have changed.\n    if (minInvalidatedStateIndex >= computedStates.length &&\n        computedStates.length === stagedActionIds.length) {\n        return computedStates;\n    }\n    const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n    // If the recording is paused, recompute all states up until the pause state,\n    // else recompute all states.\n    const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n    for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n        const actionId = stagedActionIds[i];\n        const action = actionsById[actionId].action;\n        const previousEntry = nextComputedStates[i - 1];\n        const previousState = previousEntry ? previousEntry.state : committedState;\n        const previousError = previousEntry ? previousEntry.error : undefined;\n        const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n        const entry = shouldSkip\n            ? previousEntry\n            : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n        nextComputedStates.push(entry);\n    }\n    // If the recording is paused, the last state will not be recomputed,\n    // because it's essentially not part of the state history.\n    if (isPaused) {\n        nextComputedStates.push(computedStates[computedStates.length - 1]);\n    }\n    return nextComputedStates;\n}\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n    return {\n        monitorState: monitorReducer(undefined, {}),\n        nextActionId: 1,\n        actionsById: { 0: liftAction(INIT_ACTION) },\n        stagedActionIds: [0],\n        skippedActionIds: [],\n        committedState: initialCommittedState,\n        currentStateIndex: 0,\n        computedStates: [],\n        isLocked: false,\n        isPaused: false,\n    };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n    /**\n     * Manages how the history actions modify the history state.\n     */\n    return (reducer) => (liftedState, liftedAction) => {\n        let { monitorState, actionsById, nextActionId, stagedActionIds, skippedActionIds, committedState, currentStateIndex, computedStates, isLocked, isPaused, } = liftedState || initialLiftedState;\n        if (!liftedState) {\n            // Prevent mutating initialLiftedState\n            actionsById = Object.create(actionsById);\n        }\n        function commitExcessActions(n) {\n            // Auto-commits n-number of excess actions.\n            let excess = n;\n            let idsToDelete = stagedActionIds.slice(1, excess + 1);\n            for (let i = 0; i < idsToDelete.length; i++) {\n                if (computedStates[i + 1].error) {\n                    // Stop if error is found. Commit actions up to error.\n                    excess = i;\n                    idsToDelete = stagedActionIds.slice(1, excess + 1);\n                    break;\n                }\n                else {\n                    delete actionsById[idsToDelete[i]];\n                }\n            }\n            skippedActionIds = skippedActionIds.filter((id) => idsToDelete.indexOf(id) === -1);\n            stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n            committedState = computedStates[excess].state;\n            computedStates = computedStates.slice(excess);\n            currentStateIndex =\n                currentStateIndex > excess ? currentStateIndex - excess : 0;\n        }\n        function commitChanges() {\n            // Consider the last committed state the new starting point.\n            // Squash any staged actions into a single committed state.\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            committedState = computedStates[currentStateIndex].state;\n            currentStateIndex = 0;\n            computedStates = [];\n        }\n        // By default, aggressively recompute every state whatever happens.\n        // This has O(n) performance, so we'll override this to a sensible\n        // value whenever we feel like we don't have to recompute the states.\n        let minInvalidatedStateIndex = 0;\n        switch (liftedAction.type) {\n            case LOCK_CHANGES: {\n                isLocked = liftedAction.status;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case PAUSE_RECORDING: {\n                isPaused = liftedAction.status;\n                if (isPaused) {\n                    // Add a pause action to signal the devtools-user the recording is paused.\n                    // The corresponding state will be overwritten on each update to always contain\n                    // the latest state (see Actions.PERFORM_ACTION).\n                    stagedActionIds = [...stagedActionIds, nextActionId];\n                    actionsById[nextActionId] = new PerformAction({\n                        type: '@ngrx/devtools/pause',\n                    }, +Date.now());\n                    nextActionId++;\n                    minInvalidatedStateIndex = stagedActionIds.length - 1;\n                    computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n                    if (currentStateIndex === stagedActionIds.length - 2) {\n                        currentStateIndex++;\n                    }\n                    minInvalidatedStateIndex = Infinity;\n                }\n                else {\n                    commitChanges();\n                }\n                break;\n            }\n            case RESET: {\n                // Get back to the state the store was created with.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                committedState = initialCommittedState;\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case COMMIT: {\n                commitChanges();\n                break;\n            }\n            case ROLLBACK: {\n                // Forget about any staged actions.\n                // Start again from the last committed state.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case TOGGLE_ACTION: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { id: actionId } = liftedAction;\n                const index = skippedActionIds.indexOf(actionId);\n                if (index === -1) {\n                    skippedActionIds = [actionId, ...skippedActionIds];\n                }\n                else {\n                    skippedActionIds = skippedActionIds.filter((id) => id !== actionId);\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n                break;\n            }\n            case SET_ACTIONS_ACTIVE: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { start, end, active } = liftedAction;\n                const actionIds = [];\n                for (let i = start; i < end; i++)\n                    actionIds.push(i);\n                if (active) {\n                    skippedActionIds = difference(skippedActionIds, actionIds);\n                }\n                else {\n                    skippedActionIds = [...skippedActionIds, ...actionIds];\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n                break;\n            }\n            case JUMP_TO_STATE: {\n                // Without recomputing anything, move the pointer that tell us\n                // which state is considered the current one. Useful for sliders.\n                currentStateIndex = liftedAction.index;\n                // Optimization: we know the history has not changed.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case JUMP_TO_ACTION: {\n                // Jumps to a corresponding state to a specific action.\n                // Useful when filtering actions.\n                const index = stagedActionIds.indexOf(liftedAction.actionId);\n                if (index !== -1)\n                    currentStateIndex = index;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case SWEEP: {\n                // Forget any actions that are currently being skipped.\n                stagedActionIds = difference(stagedActionIds, skippedActionIds);\n                skippedActionIds = [];\n                currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n                break;\n            }\n            case PERFORM_ACTION: {\n                // Ignore action and return state as is if recording is locked\n                if (isLocked) {\n                    return liftedState || initialLiftedState;\n                }\n                if (isPaused ||\n                    (liftedState &&\n                        isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist))) {\n                    // If recording is paused or if the action should be ignored, overwrite the last state\n                    // (corresponds to the pause action) and keep everything else as is.\n                    // This way, the app gets the new current state while the devtools\n                    // do not record another action.\n                    const lastState = computedStates[computedStates.length - 1];\n                    computedStates = [\n                        ...computedStates.slice(0, -1),\n                        computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler),\n                    ];\n                    minInvalidatedStateIndex = Infinity;\n                    break;\n                }\n                // Auto-commit as new actions come in.\n                if (options.maxAge && stagedActionIds.length === options.maxAge) {\n                    commitExcessActions(1);\n                }\n                if (currentStateIndex === stagedActionIds.length - 1) {\n                    currentStateIndex++;\n                }\n                const actionId = nextActionId++;\n                // Mutation! This is the hottest path, and we optimize on purpose.\n                // It is safe because we set a new key in a cache dictionary.\n                actionsById[actionId] = liftedAction;\n                stagedActionIds = [...stagedActionIds, actionId];\n                // Optimization: we know that only the new action needs computing.\n                minInvalidatedStateIndex = stagedActionIds.length - 1;\n                break;\n            }\n            case IMPORT_STATE: {\n                // Completely replace everything.\n                ({\n                    monitorState,\n                    actionsById,\n                    nextActionId,\n                    stagedActionIds,\n                    skippedActionIds,\n                    committedState,\n                    currentStateIndex,\n                    computedStates,\n                    isLocked,\n                    isPaused,\n                } = liftedAction.nextLiftedState);\n                break;\n            }\n            case INIT: {\n                // Always recompute states on hot reload and init.\n                minInvalidatedStateIndex = 0;\n                if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                    // States must be recomputed before committing excess.\n                    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    commitExcessActions(stagedActionIds.length - options.maxAge);\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            case UPDATE: {\n                const stateHasErrors = computedStates.filter((state) => state.error).length > 0;\n                if (stateHasErrors) {\n                    // Recompute all states\n                    minInvalidatedStateIndex = 0;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        // States must be recomputed before committing excess.\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                        // Avoid double computation.\n                        minInvalidatedStateIndex = Infinity;\n                    }\n                }\n                else {\n                    // If not paused/locked, add a new action to signal devtools-user\n                    // that there was a reducer update.\n                    if (!isPaused && !isLocked) {\n                        if (currentStateIndex === stagedActionIds.length - 1) {\n                            currentStateIndex++;\n                        }\n                        // Add a new action to only recompute state\n                        const actionId = nextActionId++;\n                        actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n                        stagedActionIds = [...stagedActionIds, actionId];\n                        minInvalidatedStateIndex = stagedActionIds.length - 1;\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    }\n                    // Recompute state history with latest reducer and update action\n                    computedStates = computedStates.map((cmp) => (Object.assign(Object.assign({}, cmp), { state: reducer(cmp.state, RECOMPUTE_ACTION) })));\n                    currentStateIndex = stagedActionIds.length - 1;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                    }\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            default: {\n                // If the action is not recognized, it's a monitor action.\n                // Optimization: a monitor action can't change history.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n        }\n        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n        monitorState = monitorReducer(monitorState, liftedAction);\n        return {\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused,\n        };\n    };\n}\n\nclass StoreDevtools {\n    constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n        const liftedInitialState = liftInitialState(initialState, config.monitor);\n        const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n        const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n        const liftedReducer$ = reducers$.pipe(map(liftReducer));\n        const liftedStateSubject = new ReplaySubject(1);\n        const liftedStateSubscription = liftedAction$\n            .pipe(withLatestFrom(liftedReducer$), scan(({ state: liftedState }, [action, reducer]) => {\n            let reducedLiftedState = reducer(liftedState, action);\n            // On full state update\n            // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n            if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n                reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n            }\n            // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n            return { state: reducedLiftedState, action };\n        }, { state: liftedInitialState, action: null }))\n            .subscribe(({ state, action }) => {\n            liftedStateSubject.next(state);\n            if (action.type === PERFORM_ACTION) {\n                const unliftedAction = action.action;\n                scannedActions.next(unliftedAction);\n            }\n        });\n        const extensionStartSubscription = extension.start$.subscribe(() => {\n            this.refresh();\n        });\n        const liftedState$ = liftedStateSubject.asObservable();\n        const state$ = liftedState$.pipe(map(unliftState));\n        this.extensionStartSubscription = extensionStartSubscription;\n        this.stateSubscription = liftedStateSubscription;\n        this.dispatcher = dispatcher;\n        this.liftedState = liftedState$;\n        this.state = state$;\n    }\n    dispatch(action) {\n        this.dispatcher.next(action);\n    }\n    next(action) {\n        this.dispatcher.next(action);\n    }\n    error(error) { }\n    complete() { }\n    performAction(action) {\n        this.dispatch(new PerformAction(action, +Date.now()));\n    }\n    refresh() {\n        this.dispatch(new Refresh());\n    }\n    reset() {\n        this.dispatch(new Reset(+Date.now()));\n    }\n    rollback() {\n        this.dispatch(new Rollback(+Date.now()));\n    }\n    commit() {\n        this.dispatch(new Commit(+Date.now()));\n    }\n    sweep() {\n        this.dispatch(new Sweep());\n    }\n    toggleAction(id) {\n        this.dispatch(new ToggleAction(id));\n    }\n    jumpToAction(actionId) {\n        this.dispatch(new JumpToAction(actionId));\n    }\n    jumpToState(index) {\n        this.dispatch(new JumpToState(index));\n    }\n    importState(nextLiftedState) {\n        this.dispatch(new ImportState(nextLiftedState));\n    }\n    lockChanges(status) {\n        this.dispatch(new LockChanges(status));\n    }\n    pauseRecording(status) {\n        this.dispatch(new PauseRecording(status));\n    }\n}\nStoreDevtools.ɵfac = function StoreDevtools_Factory(t) { return new (t || StoreDevtools)(ɵngcc0.ɵɵinject(DevtoolsDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerObservable), ɵngcc0.ɵɵinject(DevtoolsExtension), ɵngcc0.ɵɵinject(ɵngcc1.ScannedActionsSubject), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG)); };\nStoreDevtools.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: StoreDevtools, factory: StoreDevtools.ɵfac });\n/** @nocollapse */\nStoreDevtools.ctorParameters = () => [\n    { type: DevtoolsDispatcher },\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: DevtoolsExtension },\n    { type: ScannedActionsSubject },\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtools, [{\n        type: Injectable\n    }], function () { return [{ type: DevtoolsDispatcher }, { type: ɵngcc1.ActionsSubject }, { type: ɵngcc1.ReducerObservable }, { type: DevtoolsExtension }, { type: ɵngcc1.ScannedActionsSubject }, { type: ɵngcc0.ErrorHandler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [INITIAL_STATE]\n            }] }, { type: StoreDevtoolsConfig, decorators: [{\n                type: Inject,\n                args: [STORE_DEVTOOLS_CONFIG]\n            }] }]; }, null); })();\n\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n    return Boolean(extension) || config.monitor !== noMonitor;\n}\nfunction createReduxDevtoolsExtension() {\n    const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n    if (typeof window === 'object' &&\n        typeof window[extensionKey] !== 'undefined') {\n        return window[extensionKey];\n    }\n    else {\n        return null;\n    }\n}\nfunction createStateObservable(devtools) {\n    return devtools.state;\n}\nclass StoreDevtoolsModule {\n    static instrument(options = {}) {\n        return {\n            ngModule: StoreDevtoolsModule,\n            providers: [\n                DevtoolsExtension,\n                DevtoolsDispatcher,\n                StoreDevtools,\n                {\n                    provide: INITIAL_OPTIONS,\n                    useValue: options,\n                },\n                {\n                    provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n                    deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n                    useFactory: createIsExtensionOrMonitorPresent,\n                },\n                {\n                    provide: REDUX_DEVTOOLS_EXTENSION,\n                    useFactory: createReduxDevtoolsExtension,\n                },\n                {\n                    provide: STORE_DEVTOOLS_CONFIG,\n                    deps: [INITIAL_OPTIONS],\n                    useFactory: createConfig,\n                },\n                {\n                    provide: StateObservable,\n                    deps: [StoreDevtools],\n                    useFactory: createStateObservable,\n                },\n                {\n                    provide: ReducerManagerDispatcher,\n                    useExisting: DevtoolsDispatcher,\n                },\n            ],\n        };\n    }\n}\nStoreDevtoolsModule.ɵfac = function StoreDevtoolsModule_Factory(t) { return new (t || StoreDevtoolsModule)(); };\nStoreDevtoolsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StoreDevtoolsModule });\nStoreDevtoolsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtoolsModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS, RECOMPUTE, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, IS_EXTENSION_OR_MONITOR_PRESENT as ɵa, createIsExtensionOrMonitorPresent as ɵb, createReduxDevtoolsExtension as ɵc, createStateObservable as ɵd, STORE_DEVTOOLS_CONFIG as ɵe, noMonitor as ɵf, createConfig as ɵg, REDUX_DEVTOOLS_EXTENSION as ɵh, DevtoolsExtension as ɵi, DevtoolsDispatcher as ɵj };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
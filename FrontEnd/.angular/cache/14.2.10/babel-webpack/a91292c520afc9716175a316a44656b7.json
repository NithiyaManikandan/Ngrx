{"ast":null,"code":"import { createAction, props, isNgrxMockEnvironment, select, Store, ACTIVE_RUNTIME_CHECKS, createSelector } from '@ngrx/store';\nimport { InjectionToken, isDevMode, NgModule, ErrorHandler, Inject } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n/**\n * An action dispatched when a router navigation request is fired.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@angular/router';\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\n\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\n\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\n\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\n\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action;\n\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n\n    default:\n      return state;\n  }\n}\n\nclass RouterStateSerializer {}\n\nclass DefaultRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        component: route.routeConfig.component,\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet\n      } : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: route.routeConfig ? route.routeConfig.component : undefined,\n      root: undefined,\n      parent: undefined,\n      firstChild: children[0],\n      pathFromRoot: undefined,\n      children\n    };\n  }\n\n}\n\nclass MinimalRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet\n      } : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children\n    };\n  }\n\n}\n\nvar NavigationActionTiming;\n\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\n\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\n\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\n\nfunction _createRouterConfig(config) {\n  return Object.assign({\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation\n  }, config);\n}\n\nvar RouterTrigger;\n\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\n\nclass StoreRouterConnectingModule {\n  constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n\n    if (!isNgrxMockEnvironment() && isDevMode() && ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) || (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) && this.serializer instanceof DefaultRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the DefaultRouterStateSerializer. The default serializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer. ' + 'This also applies to Ivy with immutability runtime checks.');\n    }\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  static forRoot(config = {}) {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [{\n        provide: _ROUTER_CONFIG,\n        useValue: config\n      }, {\n        provide: ROUTER_CONFIG,\n        useFactory: _createRouterConfig,\n        deps: [_ROUTER_CONFIG]\n      }, {\n        provide: RouterStateSerializer,\n        useClass: config.serializer ? config.serializer : config.routerState === 0\n        /* Full */\n        ? DefaultRouterStateSerializer : MinimalRouterStateSerializer\n      }]\n    };\n  }\n\n  setUpStoreStateListener() {\n    this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(([routerStoreState, storeState]) => {\n      this.navigateIfNeeded(routerStoreState, storeState);\n    });\n  }\n\n  navigateIfNeeded(routerStoreState, storeState) {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  setUpRouterEventsListener() {\n    const dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n    let routesRecognized;\n    this.router.events.pipe(withLatestFrom(this.store)).subscribe(([event, storeState]) => {\n      this.lastEvent = event;\n\n      if (event instanceof NavigationStart) {\n        this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n\n        if (this.trigger !== RouterTrigger.STORE) {\n          this.storeState = storeState;\n          this.dispatchRouterRequest(event);\n        }\n      } else if (event instanceof RoutesRecognized) {\n        routesRecognized = event;\n\n        if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n          this.dispatchRouterNavigation(event);\n        }\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this.trigger !== RouterTrigger.STORE) {\n          if (dispatchNavLate) {\n            this.dispatchRouterNavigation(routesRecognized);\n          }\n\n          this.dispatchRouterNavigated(event);\n        }\n\n        this.reset();\n      }\n    });\n  }\n\n  dispatchRouterRequest(event) {\n    this.dispatchRouterAction(ROUTER_REQUEST, {\n      event\n    });\n  }\n\n  dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n    });\n  }\n\n  dispatchRouterCancel(event) {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event\n    });\n  }\n\n  dispatchRouterError(event) {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`)\n    });\n  }\n\n  dispatchRouterNavigated(event) {\n    const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n    this.dispatchRouterAction(ROUTER_NAVIGATED, {\n      event,\n      routerState\n    });\n  }\n\n  dispatchRouterAction(type, payload) {\n    this.trigger = RouterTrigger.ROUTER;\n\n    try {\n      this.store.dispatch({\n        type,\n        payload: Object.assign(Object.assign({\n          routerState: this.routerState\n        }, payload), {\n          event: this.config.routerState === 0\n          /* Full */\n          ? payload.event : {\n            id: payload.event.id,\n            url: payload.event.url,\n            // safe, as it will just be `undefined` for non-NavigationEnd router events\n            urlAfterRedirects: payload.event.urlAfterRedirects\n          }\n        })\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n\n}\n\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n  return new (t || StoreRouterConnectingModule)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(ROUTER_CONFIG), ɵngcc0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n};\n\nStoreRouterConnectingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\nStoreRouterConnectingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n/** @nocollapse */\n\nStoreRouterConnectingModule.ctorParameters = () => [{\n  type: Store\n}, {\n  type: Router\n}, {\n  type: RouterStateSerializer\n}, {\n  type: ErrorHandler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [ROUTER_CONFIG]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [ACTIVE_RUNTIME_CHECKS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: ɵngcc1.Store\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ACTIVE_RUNTIME_CHECKS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\n\n\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n\nfunction stripTrailingSlash(text) {\n  if (text.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n\n  return text;\n}\n\nfunction getSelectors(selectState) {\n  const selectRouterState = createSelector(selectState, router => router && router.state);\n  const selectRootRoute = createSelector(selectRouterState, routerState => routerState && routerState.root);\n  const selectCurrentRoute = createSelector(selectRootRoute, rootRoute => {\n    if (!rootRoute) {\n      return undefined;\n    }\n\n    let route = rootRoute;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    return route;\n  });\n  const selectFragment = createSelector(selectRootRoute, route => route && route.fragment);\n  const selectQueryParams = createSelector(selectRootRoute, route => route && route.queryParams);\n\n  const selectQueryParam = param => createSelector(selectQueryParams, params => params && params[param]);\n\n  const selectRouteParams = createSelector(selectCurrentRoute, route => route && route.params);\n\n  const selectRouteParam = param => createSelector(selectRouteParams, params => params && params[param]);\n\n  const selectRouteData = createSelector(selectCurrentRoute, route => route && route.data);\n  const selectUrl = createSelector(selectRouterState, routerState => routerState && routerState.url);\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl\n  };\n}\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction, _ROUTER_CONFIG as ɵa, _createRouterConfig as ɵb };","map":{"version":3,"names":["createAction","props","isNgrxMockEnvironment","select","Store","ACTIVE_RUNTIME_CHECKS","createSelector","InjectionToken","isDevMode","NgModule","ErrorHandler","Inject","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","Router","withLatestFrom","ɵngcc0","ɵngcc1","ɵngcc2","ROUTER_REQUEST","routerRequestAction","ROUTER_NAVIGATION","routerNavigationAction","ROUTER_CANCEL","routerCancelAction","ROUTER_ERROR","routerErrorAction","ROUTER_NAVIGATED","routerNavigatedAction","routerReducer","state","action","routerAction","type","payload","routerState","navigationId","event","id","RouterStateSerializer","DefaultRouterStateSerializer","serialize","root","serializeRoute","url","route","children","map","c","params","paramMap","data","outlet","routeConfig","component","path","pathMatch","redirectTo","queryParams","queryParamMap","fragment","undefined","parent","firstChild","pathFromRoot","MinimalRouterStateSerializer","NavigationActionTiming","_ROUTER_CONFIG","ROUTER_CONFIG","DEFAULT_ROUTER_FEATURENAME","_createRouterConfig","config","Object","assign","stateKey","serializer","navigationActionTiming","PreActivation","RouterTrigger","StoreRouterConnectingModule","constructor","store","router","errorHandler","activeRuntimeChecks","lastEvent","trigger","NONE","strictActionSerializability","strictStateSerializability","console","warn","setUpStoreStateListener","setUpRouterEventsListener","forRoot","ngModule","providers","provide","useValue","useFactory","deps","useClass","pipe","subscribe","routerStoreState","storeState","navigateIfNeeded","ROUTER","isSameUrl","STORE","navigateByUrl","catch","error","handleError","dispatchNavLate","PostActivation","routesRecognized","events","snapshot","dispatchRouterRequest","dispatchRouterNavigation","dispatchRouterCancel","reset","dispatchRouterError","dispatchRouterNavigated","dispatchRouterAction","lastRoutesRecognized","nextRouterState","urlAfterRedirects","dispatch","ɵfac","StoreRouterConnectingModule_Factory","t","ɵɵinject","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ctorParameters","decorators","args","ngDevMode","ɵsetClassMetadata","first","second","stripTrailingSlash","text","length","substring","getSelectors","selectState","selectRouterState","selectRootRoute","selectCurrentRoute","rootRoute","selectFragment","selectQueryParams","selectQueryParam","param","selectRouteParams","selectRouteParam","selectRouteData","selectUrl","ɵa","ɵb"],"sources":["/home/asplap1973/ngrx/FrontEnd/node_modules/@ngrx/router-store/__ivy_ngcc__/fesm2015/ngrx-router-store.js"],"sourcesContent":["import { createAction, props, isNgrxMockEnvironment, select, Store, ACTIVE_RUNTIME_CHECKS, createSelector } from '@ngrx/store';\nimport { InjectionToken, isDevMode, NgModule, ErrorHandler, Inject } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@angular/router';\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    const routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nclass RouterStateSerializer {\n}\n\nclass DefaultRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children,\n        };\n    }\n}\n\nclass MinimalRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children,\n        };\n    }\n}\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nfunction _createRouterConfig(config) {\n    return Object.assign({ stateKey: DEFAULT_ROUTER_FEATURENAME, serializer: MinimalRouterStateSerializer, navigationActionTiming: NavigationActionTiming.PreActivation }, config);\n}\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n    constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.activeRuntimeChecks = activeRuntimeChecks;\n        this.lastEvent = null;\n        this.routerState = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        if (!isNgrxMockEnvironment() &&\n            isDevMode() &&\n            ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) ||\n                (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) &&\n            this.serializer instanceof DefaultRouterStateSerializer) {\n            console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' +\n                'with the DefaultRouterStateSerializer. The default serializer ' +\n                'has an unserializable router state and actions that are not serializable. ' +\n                'To use the serializability runtime checks either use ' +\n                'the MinimalRouterStateSerializer or implement a custom router state serializer. ' +\n                'This also applies to Ivy with immutability runtime checks.');\n        }\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n                {\n                    provide: RouterStateSerializer,\n                    useClass: config.serializer\n                        ? config.serializer\n                        : config.routerState === 0 /* Full */\n                            ? DefaultRouterStateSerializer\n                            : MinimalRouterStateSerializer,\n                },\n            ],\n        };\n    }\n    setUpStoreStateListener() {\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(([routerStoreState, storeState]) => {\n            this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    }\n    navigateIfNeeded(routerStoreState, storeState) {\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        const url = routerStoreState.state.url;\n        if (!isSameUrl(this.router.url, url)) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch((error) => {\n                this.errorHandler.handleError(error);\n            });\n        }\n    }\n    setUpRouterEventsListener() {\n        const dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        let routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(([event, storeState]) => {\n            this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n                if (this.trigger !== RouterTrigger.STORE) {\n                    this.storeState = storeState;\n                    this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n                    this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                this.dispatchRouterCancel(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                this.dispatchRouterError(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    this.dispatchRouterNavigated(event);\n                }\n                this.reset();\n            }\n        });\n    }\n    dispatchRouterRequest(event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event });\n    }\n    dispatchRouterNavigation(lastRoutesRecognized) {\n        const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    }\n    dispatchRouterCancel(event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event,\n        });\n    }\n    dispatchRouterError(event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, `${event}`),\n        });\n    }\n    dispatchRouterNavigated(event) {\n        const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n    }\n    dispatchRouterAction(type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type,\n                payload: Object.assign(Object.assign({ routerState: this.routerState }, payload), { event: this.config.routerState === 0 /* Full */\n                        ? payload.event\n                        : {\n                            id: payload.event.id,\n                            url: payload.event.url,\n                            // safe, as it will just be `undefined` for non-NavigationEnd router events\n                            urlAfterRedirects: payload.event\n                                .urlAfterRedirects,\n                        } }),\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    }\n    reset() {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    }\n}\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) { return new (t || StoreRouterConnectingModule)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(ROUTER_CONFIG), ɵngcc0.ɵɵinject(ACTIVE_RUNTIME_CHECKS)); };\nStoreRouterConnectingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StoreRouterConnectingModule });\nStoreRouterConnectingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n/** @nocollapse */\nStoreRouterConnectingModule.ctorParameters = () => [\n    { type: Store },\n    { type: Router },\n    { type: RouterStateSerializer },\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [ROUTER_CONFIG,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [ACTIVE_RUNTIME_CHECKS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: ɵngcc1.Store }, { type: ɵngcc2.Router }, { type: RouterStateSerializer }, { type: ɵngcc0.ErrorHandler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ROUTER_CONFIG]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ACTIVE_RUNTIME_CHECKS]\n            }] }]; }, null); })();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n    return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n    if (text.length > 0 && text[text.length - 1] === '/') {\n        return text.substring(0, text.length - 1);\n    }\n    return text;\n}\n\nfunction getSelectors(selectState) {\n    const selectRouterState = createSelector(selectState, (router) => router && router.state);\n    const selectRootRoute = createSelector(selectRouterState, (routerState) => routerState && routerState.root);\n    const selectCurrentRoute = createSelector(selectRootRoute, (rootRoute) => {\n        if (!rootRoute) {\n            return undefined;\n        }\n        let route = rootRoute;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    const selectFragment = createSelector(selectRootRoute, (route) => route && route.fragment);\n    const selectQueryParams = createSelector(selectRootRoute, (route) => route && route.queryParams);\n    const selectQueryParam = (param) => createSelector(selectQueryParams, (params) => params && params[param]);\n    const selectRouteParams = createSelector(selectCurrentRoute, (route) => route && route.params);\n    const selectRouteParam = (param) => createSelector(selectRouteParams, (params) => params && params[param]);\n    const selectRouteData = createSelector(selectCurrentRoute, (route) => route && route.data);\n    const selectUrl = createSelector(selectRouterState, (routerState) => routerState && routerState.url);\n    return {\n        selectCurrentRoute,\n        selectFragment,\n        selectQueryParams,\n        selectQueryParam,\n        selectRouteParams,\n        selectRouteParam,\n        selectRouteData,\n        selectUrl,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction, _ROUTER_CONFIG as ɵa, _createRouterConfig as ɵb };\n\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,KAAvB,EAA8BC,qBAA9B,EAAqDC,MAArD,EAA6DC,KAA7D,EAAoEC,qBAApE,EAA2FC,cAA3F,QAAiH,aAAjH;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,YAA9C,EAA4DC,MAA5D,QAA0E,eAA1E;AACA,SAASC,eAAT,EAA0BC,gBAA1B,EAA4CC,gBAA5C,EAA8DC,eAA9D,EAA+EC,aAA/E,EAA8FC,MAA9F,QAA4G,iBAA5G;AACA,SAASC,cAAT,QAA+B,gBAA/B;AAEA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA,MAAMC,cAAc,GAAG,4BAAvB;AACA,MAAMC,mBAAmB,GAAGvB,YAAY,CAACsB,cAAD,EAAiBrB,KAAK,EAAtB,CAAxC;AACA;AACA;AACA;;AACA,MAAMuB,iBAAiB,GAAG,+BAA1B;AACA,MAAMC,sBAAsB,GAAGzB,YAAY,CAACwB,iBAAD,EAAoBvB,KAAK,EAAzB,CAA3C;AACA;AACA;AACA;;AACA,MAAMyB,aAAa,GAAG,2BAAtB;AACA,MAAMC,kBAAkB,GAAG3B,YAAY,CAAC0B,aAAD,EAAgBzB,KAAK,EAArB,CAAvC;AACA;AACA;AACA;;AACA,MAAM2B,YAAY,GAAG,0BAArB;AACA,MAAMC,iBAAiB,GAAG7B,YAAY,CAAC4B,YAAD,EAAe3B,KAAK,EAApB,CAAtC;AACA;AACA;AACA;;AACA,MAAM6B,gBAAgB,GAAG,8BAAzB;AACA,MAAMC,qBAAqB,GAAG/B,YAAY,CAAC8B,gBAAD,EAAmB7B,KAAK,EAAxB,CAA1C;;AAEA,SAAS+B,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;EAClC;EACA,MAAMC,YAAY,GAAGD,MAArB;;EACA,QAAQC,YAAY,CAACC,IAArB;IACI,KAAKZ,iBAAL;IACA,KAAKI,YAAL;IACA,KAAKF,aAAL;MACI,OAAO;QACHO,KAAK,EAAEE,YAAY,CAACE,OAAb,CAAqBC,WADzB;QAEHC,YAAY,EAAEJ,YAAY,CAACE,OAAb,CAAqBG,KAArB,CAA2BC;MAFtC,CAAP;;IAIJ;MACI,OAAOR,KAAP;EATR;AAWH;;AAED,MAAMS,qBAAN,CAA4B;;AAG5B,MAAMC,4BAAN,CAAmC;EAC/BC,SAAS,CAACN,WAAD,EAAc;IACnB,OAAO;MACHO,IAAI,EAAE,KAAKC,cAAL,CAAoBR,WAAW,CAACO,IAAhC,CADH;MAEHE,GAAG,EAAET,WAAW,CAACS;IAFd,CAAP;EAIH;;EACDD,cAAc,CAACE,KAAD,EAAQ;IAClB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAoBC,CAAD,IAAO,KAAKL,cAAL,CAAoBK,CAApB,CAA1B,CAAjB;IACA,OAAO;MACHC,MAAM,EAAEJ,KAAK,CAACI,MADX;MAEHC,QAAQ,EAAEL,KAAK,CAACK,QAFb;MAGHC,IAAI,EAAEN,KAAK,CAACM,IAHT;MAIHP,GAAG,EAAEC,KAAK,CAACD,GAJR;MAKHQ,MAAM,EAAEP,KAAK,CAACO,MALX;MAMHC,WAAW,EAAER,KAAK,CAACQ,WAAN,GACP;QACEC,SAAS,EAAET,KAAK,CAACQ,WAAN,CAAkBC,SAD/B;QAEEC,IAAI,EAAEV,KAAK,CAACQ,WAAN,CAAkBE,IAF1B;QAGEC,SAAS,EAAEX,KAAK,CAACQ,WAAN,CAAkBG,SAH/B;QAIEC,UAAU,EAAEZ,KAAK,CAACQ,WAAN,CAAkBI,UAJhC;QAKEL,MAAM,EAAEP,KAAK,CAACQ,WAAN,CAAkBD;MAL5B,CADO,GAQP,IAdH;MAeHM,WAAW,EAAEb,KAAK,CAACa,WAfhB;MAgBHC,aAAa,EAAEd,KAAK,CAACc,aAhBlB;MAiBHC,QAAQ,EAAEf,KAAK,CAACe,QAjBb;MAkBHN,SAAS,EAAGT,KAAK,CAACQ,WAAN,GACNR,KAAK,CAACQ,WAAN,CAAkBC,SADZ,GAENO,SApBH;MAqBHnB,IAAI,EAAEmB,SArBH;MAsBHC,MAAM,EAAED,SAtBL;MAuBHE,UAAU,EAAEjB,QAAQ,CAAC,CAAD,CAvBjB;MAwBHkB,YAAY,EAAEH,SAxBX;MAyBHf;IAzBG,CAAP;EA2BH;;AApC8B;;AAuCnC,MAAMmB,4BAAN,CAAmC;EAC/BxB,SAAS,CAACN,WAAD,EAAc;IACnB,OAAO;MACHO,IAAI,EAAE,KAAKC,cAAL,CAAoBR,WAAW,CAACO,IAAhC,CADH;MAEHE,GAAG,EAAET,WAAW,CAACS;IAFd,CAAP;EAIH;;EACDD,cAAc,CAACE,KAAD,EAAQ;IAClB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAoBC,CAAD,IAAO,KAAKL,cAAL,CAAoBK,CAApB,CAA1B,CAAjB;IACA,OAAO;MACHC,MAAM,EAAEJ,KAAK,CAACI,MADX;MAEHE,IAAI,EAAEN,KAAK,CAACM,IAFT;MAGHP,GAAG,EAAEC,KAAK,CAACD,GAHR;MAIHQ,MAAM,EAAEP,KAAK,CAACO,MAJX;MAKHC,WAAW,EAAER,KAAK,CAACQ,WAAN,GACP;QACEE,IAAI,EAAEV,KAAK,CAACQ,WAAN,CAAkBE,IAD1B;QAEEC,SAAS,EAAEX,KAAK,CAACQ,WAAN,CAAkBG,SAF/B;QAGEC,UAAU,EAAEZ,KAAK,CAACQ,WAAN,CAAkBI,UAHhC;QAIEL,MAAM,EAAEP,KAAK,CAACQ,WAAN,CAAkBD;MAJ5B,CADO,GAOP,IAZH;MAaHM,WAAW,EAAEb,KAAK,CAACa,WAbhB;MAcHE,QAAQ,EAAEf,KAAK,CAACe,QAdb;MAeHG,UAAU,EAAEjB,QAAQ,CAAC,CAAD,CAfjB;MAgBHA;IAhBG,CAAP;EAkBH;;AA3B8B;;AA8BnC,IAAIoB,sBAAJ;;AACA,CAAC,UAAUA,sBAAV,EAAkC;EAC/BA,sBAAsB,CAACA,sBAAsB,CAAC,eAAD,CAAtB,GAA0C,CAA3C,CAAtB,GAAsE,eAAtE;EACAA,sBAAsB,CAACA,sBAAsB,CAAC,gBAAD,CAAtB,GAA2C,CAA5C,CAAtB,GAAuE,gBAAvE;AACH,CAHD,EAGGA,sBAAsB,KAAKA,sBAAsB,GAAG,EAA9B,CAHzB;;AAIA,MAAMC,cAAc,GAAG,IAAI/D,cAAJ,CAAmB,2CAAnB,CAAvB;;AACA,MAAMgE,aAAa,GAAG,IAAIhE,cAAJ,CAAmB,kCAAnB,CAAtB;AACA,MAAMiE,0BAA0B,GAAG,QAAnC;;AACA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;EACjC,OAAOC,MAAM,CAACC,MAAP,CAAc;IAAEC,QAAQ,EAAEL,0BAAZ;IAAwCM,UAAU,EAAEV,4BAApD;IAAkFW,sBAAsB,EAAEV,sBAAsB,CAACW;EAAjI,CAAd,EAAgKN,MAAhK,CAAP;AACH;;AACD,IAAIO,aAAJ;;AACA,CAAC,UAAUA,aAAV,EAAyB;EACtBA,aAAa,CAACA,aAAa,CAAC,MAAD,CAAb,GAAwB,CAAzB,CAAb,GAA2C,MAA3C;EACAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,CAA3B,CAAb,GAA6C,QAA7C;EACAA,aAAa,CAACA,aAAa,CAAC,OAAD,CAAb,GAAyB,CAA1B,CAAb,GAA4C,OAA5C;AACH,CAJD,EAIGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAJhB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,2BAAN,CAAkC;EAC9BC,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBP,UAAhB,EAA4BQ,YAA5B,EAA0CZ,MAA1C,EAAkDa,mBAAlD,EAAuE;IAC9E,KAAKH,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKP,UAAL,GAAkBA,UAAlB;IACA,KAAKQ,YAAL,GAAoBA,YAApB;IACA,KAAKZ,MAAL,GAAcA,MAAd;IACA,KAAKa,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKlD,WAAL,GAAmB,IAAnB;IACA,KAAKmD,OAAL,GAAeR,aAAa,CAACS,IAA7B;IACA,KAAKb,QAAL,GAAgB,KAAKH,MAAL,CAAYG,QAA5B;;IACA,IAAI,CAAC3E,qBAAqB,EAAtB,IACAM,SAAS,EADT,KAEC,CAAC+E,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,mBAAmB,CAACI,2BAA/F,MACIJ,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,mBAAmB,CAACK,0BADlG,CAFD,KAIA,KAAKd,UAAL,YAA2BnC,4BAJ/B,EAI6D;MACzDkD,OAAO,CAACC,IAAR,CAAa,8EACT,gEADS,GAET,4EAFS,GAGT,uDAHS,GAIT,kFAJS,GAKT,4DALJ;IAMH;;IACD,KAAKC,uBAAL;IACA,KAAKC,yBAAL;EACH;;EACa,OAAPC,OAAO,CAACvB,MAAM,GAAG,EAAV,EAAc;IACxB,OAAO;MACHwB,QAAQ,EAAEhB,2BADP;MAEHiB,SAAS,EAAE,CACP;QAAEC,OAAO,EAAE9B,cAAX;QAA2B+B,QAAQ,EAAE3B;MAArC,CADO,EAEP;QACI0B,OAAO,EAAE7B,aADb;QAEI+B,UAAU,EAAE7B,mBAFhB;QAGI8B,IAAI,EAAE,CAACjC,cAAD;MAHV,CAFO,EAOP;QACI8B,OAAO,EAAE1D,qBADb;QAEI8D,QAAQ,EAAE9B,MAAM,CAACI,UAAP,GACJJ,MAAM,CAACI,UADH,GAEJJ,MAAM,CAACpC,WAAP,KAAuB;QAAE;QAAzB,EACIK,4BADJ,GAEIyB;MANd,CAPO;IAFR,CAAP;EAmBH;;EACD2B,uBAAuB,GAAG;IACtB,KAAKX,KAAL,CACKqB,IADL,CACUtG,MAAM,CAAC,KAAK0E,QAAN,CADhB,EACiC3D,cAAc,CAAC,KAAKkE,KAAN,CAD/C,EAEKsB,SAFL,CAEe,CAAC,CAACC,gBAAD,EAAmBC,UAAnB,CAAD,KAAoC;MAC/C,KAAKC,gBAAL,CAAsBF,gBAAtB,EAAwCC,UAAxC;IACH,CAJD;EAKH;;EACDC,gBAAgB,CAACF,gBAAD,EAAmBC,UAAnB,EAA+B;IAC3C,IAAI,CAACD,gBAAD,IAAqB,CAACA,gBAAgB,CAAC1E,KAA3C,EAAkD;MAC9C;IACH;;IACD,IAAI,KAAKwD,OAAL,KAAiBR,aAAa,CAAC6B,MAAnC,EAA2C;MACvC;IACH;;IACD,IAAI,KAAKtB,SAAL,YAA0B5E,eAA9B,EAA+C;MAC3C;IACH;;IACD,MAAMmC,GAAG,GAAG4D,gBAAgB,CAAC1E,KAAjB,CAAuBc,GAAnC;;IACA,IAAI,CAACgE,SAAS,CAAC,KAAK1B,MAAL,CAAYtC,GAAb,EAAkBA,GAAlB,CAAd,EAAsC;MAClC,KAAK6D,UAAL,GAAkBA,UAAlB;MACA,KAAKnB,OAAL,GAAeR,aAAa,CAAC+B,KAA7B;MACA,KAAK3B,MAAL,CAAY4B,aAAZ,CAA0BlE,GAA1B,EAA+BmE,KAA/B,CAAsCC,KAAD,IAAW;QAC5C,KAAK7B,YAAL,CAAkB8B,WAAlB,CAA8BD,KAA9B;MACH,CAFD;IAGH;EACJ;;EACDnB,yBAAyB,GAAG;IACxB,MAAMqB,eAAe,GAAG,KAAK3C,MAAL,CAAYK,sBAAZ,KACpBV,sBAAsB,CAACiD,cAD3B;IAEA,IAAIC,gBAAJ;IACA,KAAKlC,MAAL,CAAYmC,MAAZ,CACKf,IADL,CACUvF,cAAc,CAAC,KAAKkE,KAAN,CADxB,EAEKsB,SAFL,CAEe,CAAC,CAAClE,KAAD,EAAQoE,UAAR,CAAD,KAAyB;MACpC,KAAKpB,SAAL,GAAiBhD,KAAjB;;MACA,IAAIA,KAAK,YAAY5B,eAArB,EAAsC;QAClC,KAAK0B,WAAL,GAAmB,KAAKwC,UAAL,CAAgBlC,SAAhB,CAA0B,KAAKyC,MAAL,CAAY/C,WAAZ,CAAwBmF,QAAlD,CAAnB;;QACA,IAAI,KAAKhC,OAAL,KAAiBR,aAAa,CAAC+B,KAAnC,EAA0C;UACtC,KAAKJ,UAAL,GAAkBA,UAAlB;UACA,KAAKc,qBAAL,CAA2BlF,KAA3B;QACH;MACJ,CAND,MAOK,IAAIA,KAAK,YAAY3B,gBAArB,EAAuC;QACxC0G,gBAAgB,GAAG/E,KAAnB;;QACA,IAAI,CAAC6E,eAAD,IAAoB,KAAK5B,OAAL,KAAiBR,aAAa,CAAC+B,KAAvD,EAA8D;UAC1D,KAAKW,wBAAL,CAA8BnF,KAA9B;QACH;MACJ,CALI,MAMA,IAAIA,KAAK,YAAY1B,gBAArB,EAAuC;QACxC,KAAK8G,oBAAL,CAA0BpF,KAA1B;QACA,KAAKqF,KAAL;MACH,CAHI,MAIA,IAAIrF,KAAK,YAAYzB,eAArB,EAAsC;QACvC,KAAK+G,mBAAL,CAAyBtF,KAAzB;QACA,KAAKqF,KAAL;MACH,CAHI,MAIA,IAAIrF,KAAK,YAAYxB,aAArB,EAAoC;QACrC,IAAI,KAAKyE,OAAL,KAAiBR,aAAa,CAAC+B,KAAnC,EAA0C;UACtC,IAAIK,eAAJ,EAAqB;YACjB,KAAKM,wBAAL,CAA8BJ,gBAA9B;UACH;;UACD,KAAKQ,uBAAL,CAA6BvF,KAA7B;QACH;;QACD,KAAKqF,KAAL;MACH;IACJ,CAlCD;EAmCH;;EACDH,qBAAqB,CAAClF,KAAD,EAAQ;IACzB,KAAKwF,oBAAL,CAA0B1G,cAA1B,EAA0C;MAAEkB;IAAF,CAA1C;EACH;;EACDmF,wBAAwB,CAACM,oBAAD,EAAuB;IAC3C,MAAMC,eAAe,GAAG,KAAKpD,UAAL,CAAgBlC,SAAhB,CAA0BqF,oBAAoB,CAAChG,KAA/C,CAAxB;IACA,KAAK+F,oBAAL,CAA0BxG,iBAA1B,EAA6C;MACzCc,WAAW,EAAE4F,eAD4B;MAEzC1F,KAAK,EAAE,IAAI3B,gBAAJ,CAAqBoH,oBAAoB,CAACxF,EAA1C,EAA8CwF,oBAAoB,CAAClF,GAAnE,EAAwEkF,oBAAoB,CAACE,iBAA7F,EAAgHD,eAAhH;IAFkC,CAA7C;EAIH;;EACDN,oBAAoB,CAACpF,KAAD,EAAQ;IACxB,KAAKwF,oBAAL,CAA0BtG,aAA1B,EAAyC;MACrCkF,UAAU,EAAE,KAAKA,UADoB;MAErCpE;IAFqC,CAAzC;EAIH;;EACDsF,mBAAmB,CAACtF,KAAD,EAAQ;IACvB,KAAKwF,oBAAL,CAA0BpG,YAA1B,EAAwC;MACpCgF,UAAU,EAAE,KAAKA,UADmB;MAEpCpE,KAAK,EAAE,IAAIzB,eAAJ,CAAoByB,KAAK,CAACC,EAA1B,EAA8BD,KAAK,CAACO,GAApC,EAA0C,GAAEP,KAAM,EAAlD;IAF6B,CAAxC;EAIH;;EACDuF,uBAAuB,CAACvF,KAAD,EAAQ;IAC3B,MAAMF,WAAW,GAAG,KAAKwC,UAAL,CAAgBlC,SAAhB,CAA0B,KAAKyC,MAAL,CAAY/C,WAAZ,CAAwBmF,QAAlD,CAApB;IACA,KAAKO,oBAAL,CAA0BlG,gBAA1B,EAA4C;MAAEU,KAAF;MAASF;IAAT,CAA5C;EACH;;EACD0F,oBAAoB,CAAC5F,IAAD,EAAOC,OAAP,EAAgB;IAChC,KAAKoD,OAAL,GAAeR,aAAa,CAAC6B,MAA7B;;IACA,IAAI;MACA,KAAK1B,KAAL,CAAWgD,QAAX,CAAoB;QAChBhG,IADgB;QAEhBC,OAAO,EAAEsC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc;UAAEtC,WAAW,EAAE,KAAKA;QAApB,CAAd,EAAiDD,OAAjD,CAAd,EAAyE;UAAEG,KAAK,EAAE,KAAKkC,MAAL,CAAYpC,WAAZ,KAA4B;UAAE;UAA9B,EACjFD,OAAO,CAACG,KADyE,GAEjF;YACEC,EAAE,EAAEJ,OAAO,CAACG,KAAR,CAAcC,EADpB;YAEEM,GAAG,EAAEV,OAAO,CAACG,KAAR,CAAcO,GAFrB;YAGE;YACAoF,iBAAiB,EAAE9F,OAAO,CAACG,KAAR,CACd2F;UALP;QAFwE,CAAzE;MAFO,CAApB;IAYH,CAbD,SAcQ;MACJ,KAAK1C,OAAL,GAAeR,aAAa,CAACS,IAA7B;IACH;EACJ;;EACDmC,KAAK,GAAG;IACJ,KAAKpC,OAAL,GAAeR,aAAa,CAACS,IAA7B;IACA,KAAKkB,UAAL,GAAkB,IAAlB;IACA,KAAKtE,WAAL,GAAmB,IAAnB;EACH;;AApK6B;;AAsKlC4C,2BAA2B,CAACmD,IAA5B,GAAmC,SAASC,mCAAT,CAA6CC,CAA7C,EAAgD;EAAE,OAAO,KAAKA,CAAC,IAAIrD,2BAAV,EAAuC/D,MAAM,CAACqH,QAAP,CAAgBpH,MAAM,CAAChB,KAAvB,CAAvC,EAAsEe,MAAM,CAACqH,QAAP,CAAgBnH,MAAM,CAACJ,MAAvB,CAAtE,EAAsGE,MAAM,CAACqH,QAAP,CAAgB9F,qBAAhB,CAAtG,EAA8IvB,MAAM,CAACqH,QAAP,CAAgBrH,MAAM,CAACT,YAAvB,CAA9I,EAAoLS,MAAM,CAACqH,QAAP,CAAgBjE,aAAhB,CAApL,EAAoNpD,MAAM,CAACqH,QAAP,CAAgBnI,qBAAhB,CAApN,CAAP;AAAqQ,CAA1V;;AACA6E,2BAA2B,CAACuD,IAA5B,GAAmC,aAActH,MAAM,CAACuH,gBAAP,CAAwB;EAAEtG,IAAI,EAAE8C;AAAR,CAAxB,CAAjD;AACAA,2BAA2B,CAACyD,IAA5B,GAAmC,aAAcxH,MAAM,CAACyH,gBAAP,CAAwB,EAAxB,CAAjD;AACA;;AACA1D,2BAA2B,CAAC2D,cAA5B,GAA6C,MAAM,CAC/C;EAAEzG,IAAI,EAAEhC;AAAR,CAD+C,EAE/C;EAAEgC,IAAI,EAAEnB;AAAR,CAF+C,EAG/C;EAAEmB,IAAI,EAAEM;AAAR,CAH+C,EAI/C;EAAEN,IAAI,EAAE1B;AAAR,CAJ+C,EAK/C;EAAE0B,IAAI,EAAE4B,SAAR;EAAmB8E,UAAU,EAAE,CAAC;IAAE1G,IAAI,EAAEzB,MAAR;IAAgBoI,IAAI,EAAE,CAACxE,aAAD;EAAtB,CAAD;AAA/B,CAL+C,EAM/C;EAAEnC,IAAI,EAAE4B,SAAR;EAAmB8E,UAAU,EAAE,CAAC;IAAE1G,IAAI,EAAEzB,MAAR;IAAgBoI,IAAI,EAAE,CAAC1I,qBAAD;EAAtB,CAAD;AAA/B,CAN+C,CAAnD;;AAQA,CAAC,YAAY;EAAE,CAAC,OAAO2I,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7H,MAAM,CAAC8H,iBAAP,CAAyB/D,2BAAzB,EAAsD,CAAC;IACjH9C,IAAI,EAAE3B,QAD2G;IAEjHsI,IAAI,EAAE,CAAC,EAAD;EAF2G,CAAD,CAAtD,EAG1D,YAAY;IAAE,OAAO,CAAC;MAAE3G,IAAI,EAAEhB,MAAM,CAAChB;IAAf,CAAD,EAAyB;MAAEgC,IAAI,EAAEf,MAAM,CAACJ;IAAf,CAAzB,EAAkD;MAAEmB,IAAI,EAAEM;IAAR,CAAlD,EAAmF;MAAEN,IAAI,EAAEjB,MAAM,CAACT;IAAf,CAAnF,EAAkH;MAAE0B,IAAI,EAAE4B,SAAR;MAAmB8E,UAAU,EAAE,CAAC;QAC/J1G,IAAI,EAAEzB,MADyJ;QAE/JoI,IAAI,EAAE,CAACxE,aAAD;MAFyJ,CAAD;IAA/B,CAAlH,EAGX;MAAEnC,IAAI,EAAE4B,SAAR;MAAmB8E,UAAU,EAAE,CAAC;QAClC1G,IAAI,EAAEzB,MAD4B;QAElCoI,IAAI,EAAE,CAAC1I,qBAAD;MAF4B,CAAD;IAA/B,CAHW,CAAP;EAMF,CAT8C,EAS5C,IAT4C,CAAnD;AASe,CAT9B;AAUA;AACA;AACA;;;AACA,SAAS0G,SAAT,CAAmBmC,KAAnB,EAA0BC,MAA1B,EAAkC;EAC9B,OAAOC,kBAAkB,CAACF,KAAD,CAAlB,KAA8BE,kBAAkB,CAACD,MAAD,CAAvD;AACH;;AACD,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;EAC9B,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAAjD,EAAsD;IAClD,OAAOD,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBF,IAAI,CAACC,MAAL,GAAc,CAAhC,CAAP;EACH;;EACD,OAAOD,IAAP;AACH;;AAED,SAASG,YAAT,CAAsBC,WAAtB,EAAmC;EAC/B,MAAMC,iBAAiB,GAAGpJ,cAAc,CAACmJ,WAAD,EAAepE,MAAD,IAAYA,MAAM,IAAIA,MAAM,CAACpD,KAA3C,CAAxC;EACA,MAAM0H,eAAe,GAAGrJ,cAAc,CAACoJ,iBAAD,EAAqBpH,WAAD,IAAiBA,WAAW,IAAIA,WAAW,CAACO,IAAhE,CAAtC;EACA,MAAM+G,kBAAkB,GAAGtJ,cAAc,CAACqJ,eAAD,EAAmBE,SAAD,IAAe;IACtE,IAAI,CAACA,SAAL,EAAgB;MACZ,OAAO7F,SAAP;IACH;;IACD,IAAIhB,KAAK,GAAG6G,SAAZ;;IACA,OAAO7G,KAAK,CAACkB,UAAb,EAAyB;MACrBlB,KAAK,GAAGA,KAAK,CAACkB,UAAd;IACH;;IACD,OAAOlB,KAAP;EACH,CATwC,CAAzC;EAUA,MAAM8G,cAAc,GAAGxJ,cAAc,CAACqJ,eAAD,EAAmB3G,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACe,QAA5C,CAArC;EACA,MAAMgG,iBAAiB,GAAGzJ,cAAc,CAACqJ,eAAD,EAAmB3G,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACa,WAA5C,CAAxC;;EACA,MAAMmG,gBAAgB,GAAIC,KAAD,IAAW3J,cAAc,CAACyJ,iBAAD,EAAqB3G,MAAD,IAAYA,MAAM,IAAIA,MAAM,CAAC6G,KAAD,CAAhD,CAAlD;;EACA,MAAMC,iBAAiB,GAAG5J,cAAc,CAACsJ,kBAAD,EAAsB5G,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACI,MAA/C,CAAxC;;EACA,MAAM+G,gBAAgB,GAAIF,KAAD,IAAW3J,cAAc,CAAC4J,iBAAD,EAAqB9G,MAAD,IAAYA,MAAM,IAAIA,MAAM,CAAC6G,KAAD,CAAhD,CAAlD;;EACA,MAAMG,eAAe,GAAG9J,cAAc,CAACsJ,kBAAD,EAAsB5G,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACM,IAA/C,CAAtC;EACA,MAAM+G,SAAS,GAAG/J,cAAc,CAACoJ,iBAAD,EAAqBpH,WAAD,IAAiBA,WAAW,IAAIA,WAAW,CAACS,GAAhE,CAAhC;EACA,OAAO;IACH6G,kBADG;IAEHE,cAFG;IAGHC,iBAHG;IAIHC,gBAJG;IAKHE,iBALG;IAMHC,gBANG;IAOHC,eAPG;IAQHC;EARG,CAAP;AAUH;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS7F,0BAAT,EAAqC7B,4BAArC,EAAmEyB,4BAAnE,EAAiGC,sBAAjG,EAAyH3C,aAAzH,EAAwI6C,aAAxI,EAAuJ3C,YAAvJ,EAAqKE,gBAArK,EAAuLN,iBAAvL,EAA0MF,cAA1M,EAA0NoB,qBAA1N,EAAiPwC,2BAAjP,EAA8QsE,YAA9Q,EAA4R7H,kBAA5R,EAAgTE,iBAAhT,EAAmUE,qBAAnU,EAA0VN,sBAA1V,EAAkXO,aAAlX,EAAiYT,mBAAjY,EAAsZ+C,cAAc,IAAIgG,EAAxa,EAA4a7F,mBAAmB,IAAI8F,EAAnc"},"metadata":{},"sourceType":"module"}